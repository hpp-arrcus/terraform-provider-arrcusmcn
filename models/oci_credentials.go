// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OciCredentials oci credentials
//
// swagger:model oci_credentials
type OciCredentials struct {

	// fingerprint
	// Read Only: true
	// Min Length: 1
	Fingerprint *string `json:"fingerprint,omitempty"`

	// identity domain
	// Min Length: 1
	IdentityDomain string `json:"identity_domain,omitempty"`

	// key file
	// Min Length: 1
	KeyFile *string `json:"key_file,omitempty"`

	// region
	// Min Length: 1
	Region string `json:"region,omitempty"`

	// tenancy
	// Min Length: 1
	Tenancy string `json:"tenancy,omitempty"`

	// user
	// Min Length: 1
	User string `json:"user,omitempty"`
}

// Validate validates this oci credentials
func (m *OciCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFingerprint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentityDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyFile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenancy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OciCredentials) validateFingerprint(formats strfmt.Registry) error {
	if swag.IsZero(m.Fingerprint) { // not required
		return nil
	}

	if err := validate.MinLength("fingerprint", "body", *m.Fingerprint, 1); err != nil {
		return err
	}

	return nil
}

func (m *OciCredentials) validateIdentityDomain(formats strfmt.Registry) error {
	if swag.IsZero(m.IdentityDomain) { // not required
		return nil
	}

	if err := validate.MinLength("identity_domain", "body", m.IdentityDomain, 1); err != nil {
		return err
	}

	return nil
}

func (m *OciCredentials) validateKeyFile(formats strfmt.Registry) error {
	if swag.IsZero(m.KeyFile) { // not required
		return nil
	}

	if err := validate.MinLength("key_file", "body", *m.KeyFile, 1); err != nil {
		return err
	}

	return nil
}

func (m *OciCredentials) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(m.Region) { // not required
		return nil
	}

	if err := validate.MinLength("region", "body", m.Region, 1); err != nil {
		return err
	}

	return nil
}

func (m *OciCredentials) validateTenancy(formats strfmt.Registry) error {
	if swag.IsZero(m.Tenancy) { // not required
		return nil
	}

	if err := validate.MinLength("tenancy", "body", m.Tenancy, 1); err != nil {
		return err
	}

	return nil
}

func (m *OciCredentials) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if err := validate.MinLength("user", "body", m.User, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this oci credentials based on the context it is used
func (m *OciCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFingerprint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OciCredentials) contextValidateFingerprint(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "fingerprint", "body", m.Fingerprint); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OciCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OciCredentials) UnmarshalBinary(b []byte) error {
	var res OciCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
