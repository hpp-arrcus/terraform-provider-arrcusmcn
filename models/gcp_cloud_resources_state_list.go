// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GcpCloudResourcesStateList gcp cloud resources state list
//
// swagger:model gcp_cloud_resources_state_list
type GcpCloudResourcesStateList struct {

	// gcp router
	GcpRouter string `json:"gcp_router,omitempty"`

	// gcp subnet
	GcpSubnet string `json:"gcp_subnet,omitempty"`

	// gcp vlan attachments
	GcpVlanAttachments *GcpCloudResourcesStateListGcpVlanAttachments `json:"gcp_vlan_attachments,omitempty"`

	// gcp vpc
	GcpVpc string `json:"gcp_vpc,omitempty"`
}

// Validate validates this gcp cloud resources state list
func (m *GcpCloudResourcesStateList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGcpVlanAttachments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GcpCloudResourcesStateList) validateGcpVlanAttachments(formats strfmt.Registry) error {
	if swag.IsZero(m.GcpVlanAttachments) { // not required
		return nil
	}

	if m.GcpVlanAttachments != nil {
		if err := m.GcpVlanAttachments.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcp_vlan_attachments")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcp_vlan_attachments")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this gcp cloud resources state list based on the context it is used
func (m *GcpCloudResourcesStateList) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGcpVlanAttachments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GcpCloudResourcesStateList) contextValidateGcpVlanAttachments(ctx context.Context, formats strfmt.Registry) error {

	if m.GcpVlanAttachments != nil {
		if err := m.GcpVlanAttachments.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcp_vlan_attachments")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcp_vlan_attachments")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GcpCloudResourcesStateList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GcpCloudResourcesStateList) UnmarshalBinary(b []byte) error {
	var res GcpCloudResourcesStateList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GcpCloudResourcesStateListGcpVlanAttachments gcp cloud resources state list gcp vlan attachments
//
// swagger:model GcpCloudResourcesStateListGcpVlanAttachments
type GcpCloudResourcesStateListGcpVlanAttachments struct {

	// attachments list
	AttachmentsList []*GcpCloudResourcesStateListGcpVlanAttachmentsAttachmentsListItems0 `json:"attachments_list"`

	// num attachments
	NumAttachments int64 `json:"num_attachments,omitempty"`
}

// Validate validates this gcp cloud resources state list gcp vlan attachments
func (m *GcpCloudResourcesStateListGcpVlanAttachments) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachmentsList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GcpCloudResourcesStateListGcpVlanAttachments) validateAttachmentsList(formats strfmt.Registry) error {
	if swag.IsZero(m.AttachmentsList) { // not required
		return nil
	}

	for i := 0; i < len(m.AttachmentsList); i++ {
		if swag.IsZero(m.AttachmentsList[i]) { // not required
			continue
		}

		if m.AttachmentsList[i] != nil {
			if err := m.AttachmentsList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("gcp_vlan_attachments" + "." + "attachments_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("gcp_vlan_attachments" + "." + "attachments_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this gcp cloud resources state list gcp vlan attachments based on the context it is used
func (m *GcpCloudResourcesStateListGcpVlanAttachments) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttachmentsList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GcpCloudResourcesStateListGcpVlanAttachments) contextValidateAttachmentsList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AttachmentsList); i++ {

		if m.AttachmentsList[i] != nil {
			if err := m.AttachmentsList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("gcp_vlan_attachments" + "." + "attachments_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("gcp_vlan_attachments" + "." + "attachments_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GcpCloudResourcesStateListGcpVlanAttachments) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GcpCloudResourcesStateListGcpVlanAttachments) UnmarshalBinary(b []byte) error {
	var res GcpCloudResourcesStateListGcpVlanAttachments
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GcpCloudResourcesStateListGcpVlanAttachmentsAttachmentsListItems0 gcp cloud resources state list gcp vlan attachments attachments list items0
//
// swagger:model GcpCloudResourcesStateListGcpVlanAttachmentsAttachmentsListItems0
type GcpCloudResourcesStateListGcpVlanAttachmentsAttachmentsListItems0 struct {

	// cloud router ip
	CloudRouterIP string `json:"cloud_router_ip,omitempty"`

	// customer router ip
	CustomerRouterIP string `json:"customer_router_ip,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// pairing key
	PairingKey string `json:"pairing_key,omitempty"`
}

// Validate validates this gcp cloud resources state list gcp vlan attachments attachments list items0
func (m *GcpCloudResourcesStateListGcpVlanAttachmentsAttachmentsListItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this gcp cloud resources state list gcp vlan attachments attachments list items0 based on context it is used
func (m *GcpCloudResourcesStateListGcpVlanAttachmentsAttachmentsListItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GcpCloudResourcesStateListGcpVlanAttachmentsAttachmentsListItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GcpCloudResourcesStateListGcpVlanAttachmentsAttachmentsListItems0) UnmarshalBinary(b []byte) error {
	var res GcpCloudResourcesStateListGcpVlanAttachmentsAttachmentsListItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
