// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudResources cloud resources
//
// swagger:model cloud_resources
type CloudResources struct {

	// cloud region
	// Required: true
	// Min Length: 1
	CloudRegion *string `json:"cloud_region"`

	// cloud subregion
	CloudSubregion string `json:"cloud_subregion,omitempty"`

	// credential id
	// Required: true
	// Min Length: 1
	CredentialID *string `json:"credential_id"`

	// customer prefix id
	// Required: true
	// Min Length: 1
	CustomerPrefixID *string `json:"customer_prefix_id"`

	// provider
	// Required: true
	Provider *Providers `json:"provider"`

	// resource config
	// Required: true
	ResourceConfig struct {
		AwsCloudResourcesConfig

		GcpCloudResourcesConfig

		AzureCloudResourcesConfig
	} `json:"resource_config"`
}

// Validate validates this cloud resources
func (m *CloudResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentialID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerPrefixID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudResources) validateCloudRegion(formats strfmt.Registry) error {

	if err := validate.Required("cloud_region", "body", m.CloudRegion); err != nil {
		return err
	}

	if err := validate.MinLength("cloud_region", "body", *m.CloudRegion, 1); err != nil {
		return err
	}

	return nil
}

func (m *CloudResources) validateCredentialID(formats strfmt.Registry) error {

	if err := validate.Required("credential_id", "body", m.CredentialID); err != nil {
		return err
	}

	if err := validate.MinLength("credential_id", "body", *m.CredentialID, 1); err != nil {
		return err
	}

	return nil
}

func (m *CloudResources) validateCustomerPrefixID(formats strfmt.Registry) error {

	if err := validate.Required("customer_prefix_id", "body", m.CustomerPrefixID); err != nil {
		return err
	}

	if err := validate.MinLength("customer_prefix_id", "body", *m.CustomerPrefixID, 1); err != nil {
		return err
	}

	return nil
}

func (m *CloudResources) validateProvider(formats strfmt.Registry) error {

	if err := validate.Required("provider", "body", m.Provider); err != nil {
		return err
	}

	if err := validate.Required("provider", "body", m.Provider); err != nil {
		return err
	}

	if m.Provider != nil {
		if err := m.Provider.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provider")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provider")
			}
			return err
		}
	}

	return nil
}

func (m *CloudResources) validateResourceConfig(formats strfmt.Registry) error {

	return nil
}

// ContextValidate validate this cloud resources based on the context it is used
func (m *CloudResources) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProvider(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudResources) contextValidateProvider(ctx context.Context, formats strfmt.Registry) error {

	if m.Provider != nil {
		if err := m.Provider.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provider")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provider")
			}
			return err
		}
	}

	return nil
}

func (m *CloudResources) contextValidateResourceConfig(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *CloudResources) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudResources) UnmarshalBinary(b []byte) error {
	var res CloudResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
