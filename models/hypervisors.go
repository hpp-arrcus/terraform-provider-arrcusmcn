// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Hypervisors hypervisors
//
// swagger:model Hypervisors
type Hypervisors string

func NewHypervisors(value Hypervisors) *Hypervisors {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Hypervisors.
func (m Hypervisors) Pointer() *Hypervisors {
	return &m
}

const (

	// HypervisorsVsphere captures enum value "vsphere"
	HypervisorsVsphere Hypervisors = "vsphere"

	// HypervisorsKvm captures enum value "kvm"
	HypervisorsKvm Hypervisors = "kvm"
)

// for schema
var hypervisorsEnum []interface{}

func init() {
	var res []Hypervisors
	if err := json.Unmarshal([]byte(`["vsphere","kvm"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hypervisorsEnum = append(hypervisorsEnum, v)
	}
}

func (m Hypervisors) validateHypervisorsEnum(path, location string, value Hypervisors) error {
	if err := validate.EnumCase(path, location, value, hypervisorsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this hypervisors
func (m Hypervisors) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateHypervisorsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this hypervisors based on context it is used
func (m Hypervisors) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
