// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Discoveredfqdns discoveredfqdns
//
// swagger:model discoveredfqdns
type Discoveredfqdns struct {

	// fqdnlist
	// Required: true
	Fqdnlist []Fqdn `json:"fqdnlist"`

	// id
	// Read Only: true
	// Min Length: 1
	// Format: ObjectId
	ID *strfmt.ObjectId `json:"id,omitempty" bson:"_id, omitempty"`

	// name
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// time
	Time int64 `json:"time,omitempty"`
}

// Validate validates this discoveredfqdns
func (m *Discoveredfqdns) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFqdnlist(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Discoveredfqdns) validateFqdnlist(formats strfmt.Registry) error {

	if err := validate.Required("fqdnlist", "body", m.Fqdnlist); err != nil {
		return err
	}

	for i := 0; i < len(m.Fqdnlist); i++ {

		if err := m.Fqdnlist[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fqdnlist" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fqdnlist" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *Discoveredfqdns) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", m.ID.String(), 1); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "ObjectId", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Discoveredfqdns) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this discoveredfqdns based on the context it is used
func (m *Discoveredfqdns) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFqdnlist(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Discoveredfqdns) contextValidateFqdnlist(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Fqdnlist); i++ {

		if err := m.Fqdnlist[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fqdnlist" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fqdnlist" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *Discoveredfqdns) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Discoveredfqdns) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Discoveredfqdns) UnmarshalBinary(b []byte) error {
	var res Discoveredfqdns
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
