// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ArcedgeImage arcedge image
//
// swagger:model arcedge_image
type ArcedgeImage struct {

	// image id
	// Required: true
	ImageID *string `json:"image_id"`

	// name
	Name string `json:"name,omitempty"`

	// provider
	Provider Providers `json:"provider,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this arcedge image
func (m *ArcedgeImage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArcedgeImage) validateImageID(formats strfmt.Registry) error {

	if err := validate.Required("image_id", "body", m.ImageID); err != nil {
		return err
	}

	return nil
}

func (m *ArcedgeImage) validateProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.Provider) { // not required
		return nil
	}

	if err := m.Provider.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("provider")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("provider")
		}
		return err
	}

	return nil
}

// ContextValidate validate this arcedge image based on the context it is used
func (m *ArcedgeImage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProvider(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArcedgeImage) contextValidateProvider(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Provider.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("provider")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("provider")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArcedgeImage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArcedgeImage) UnmarshalBinary(b []byte) error {
	var res ArcedgeImage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
