// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ArcedgeName arcedge name
//
// swagger:model arcedge_name
type ArcedgeName string

func NewArcedgeName(value ArcedgeName) *ArcedgeName {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ArcedgeName.
func (m ArcedgeName) Pointer() *ArcedgeName {
	return &m
}

const (

	// ArcedgeNameA captures enum value "A"
	ArcedgeNameA ArcedgeName = "A"

	// ArcedgeNameB captures enum value "B"
	ArcedgeNameB ArcedgeName = "B"

	// ArcedgeNameNone captures enum value "None"
	ArcedgeNameNone ArcedgeName = "None"
)

// for schema
var arcedgeNameEnum []interface{}

func init() {
	var res []ArcedgeName
	if err := json.Unmarshal([]byte(`["A","B","None"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		arcedgeNameEnum = append(arcedgeNameEnum, v)
	}
}

func (m ArcedgeName) validateArcedgeNameEnum(path, location string, value ArcedgeName) error {
	if err := validate.EnumCase(path, location, value, arcedgeNameEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this arcedge name
func (m ArcedgeName) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateArcedgeNameEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this arcedge name based on context it is used
func (m ArcedgeName) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
