// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureCloudResourcesConfig azure cloud resources config
//
// swagger:model azure_cloud_resources_config
type AzureCloudResourcesConfig struct {

	// express route circuit
	ExpressRouteCircuit *AzureCloudResourcesConfigExpressRouteCircuit `json:"express_route_circuit,omitempty"`

	// gateway
	Gateway *AzureCloudResourcesConfigGateway `json:"gateway,omitempty"`

	// network
	Network *AzureCloudResourcesConfigNetwork `json:"network,omitempty"`
}

// Validate validates this azure cloud resources config
func (m *AzureCloudResourcesConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpressRouteCircuit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureCloudResourcesConfig) validateExpressRouteCircuit(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpressRouteCircuit) { // not required
		return nil
	}

	if m.ExpressRouteCircuit != nil {
		if err := m.ExpressRouteCircuit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("express_route_circuit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("express_route_circuit")
			}
			return err
		}
	}

	return nil
}

func (m *AzureCloudResourcesConfig) validateGateway(formats strfmt.Registry) error {
	if swag.IsZero(m.Gateway) { // not required
		return nil
	}

	if m.Gateway != nil {
		if err := m.Gateway.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gateway")
			}
			return err
		}
	}

	return nil
}

func (m *AzureCloudResourcesConfig) validateNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.Network) { // not required
		return nil
	}

	if m.Network != nil {
		if err := m.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this azure cloud resources config based on the context it is used
func (m *AzureCloudResourcesConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExpressRouteCircuit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGateway(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureCloudResourcesConfig) contextValidateExpressRouteCircuit(ctx context.Context, formats strfmt.Registry) error {

	if m.ExpressRouteCircuit != nil {
		if err := m.ExpressRouteCircuit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("express_route_circuit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("express_route_circuit")
			}
			return err
		}
	}

	return nil
}

func (m *AzureCloudResourcesConfig) contextValidateGateway(ctx context.Context, formats strfmt.Registry) error {

	if m.Gateway != nil {
		if err := m.Gateway.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gateway")
			}
			return err
		}
	}

	return nil
}

func (m *AzureCloudResourcesConfig) contextValidateNetwork(ctx context.Context, formats strfmt.Registry) error {

	if m.Network != nil {
		if err := m.Network.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureCloudResourcesConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureCloudResourcesConfig) UnmarshalBinary(b []byte) error {
	var res AzureCloudResourcesConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AzureCloudResourcesConfigExpressRouteCircuit azure cloud resources config express route circuit
//
// swagger:model AzureCloudResourcesConfigExpressRouteCircuit
type AzureCloudResourcesConfigExpressRouteCircuit struct {

	// bandwidth
	Bandwidth int64 `json:"bandwidth,omitempty"`

	// peering
	Peering *AzureCloudResourcesConfigExpressRouteCircuitPeering `json:"peering,omitempty"`

	// peering location
	PeeringLocation string `json:"peering_location,omitempty"`

	// provisioned
	Provisioned bool `json:"provisioned,omitempty"`

	// service provider
	ServiceProvider string `json:"service_provider,omitempty"`

	// sku family
	// Enum: [MeteredData UnlimitedData]
	SkuFamily string `json:"sku_family,omitempty"`

	// sku tier
	// Enum: [Basic Local Standard Premium]
	SkuTier string `json:"sku_tier,omitempty"`
}

// Validate validates this azure cloud resources config express route circuit
func (m *AzureCloudResourcesConfigExpressRouteCircuit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePeering(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkuFamily(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkuTier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureCloudResourcesConfigExpressRouteCircuit) validatePeering(formats strfmt.Registry) error {
	if swag.IsZero(m.Peering) { // not required
		return nil
	}

	if m.Peering != nil {
		if err := m.Peering.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("express_route_circuit" + "." + "peering")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("express_route_circuit" + "." + "peering")
			}
			return err
		}
	}

	return nil
}

var azureCloudResourcesConfigExpressRouteCircuitTypeSkuFamilyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MeteredData","UnlimitedData"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		azureCloudResourcesConfigExpressRouteCircuitTypeSkuFamilyPropEnum = append(azureCloudResourcesConfigExpressRouteCircuitTypeSkuFamilyPropEnum, v)
	}
}

const (

	// AzureCloudResourcesConfigExpressRouteCircuitSkuFamilyMeteredData captures enum value "MeteredData"
	AzureCloudResourcesConfigExpressRouteCircuitSkuFamilyMeteredData string = "MeteredData"

	// AzureCloudResourcesConfigExpressRouteCircuitSkuFamilyUnlimitedData captures enum value "UnlimitedData"
	AzureCloudResourcesConfigExpressRouteCircuitSkuFamilyUnlimitedData string = "UnlimitedData"
)

// prop value enum
func (m *AzureCloudResourcesConfigExpressRouteCircuit) validateSkuFamilyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, azureCloudResourcesConfigExpressRouteCircuitTypeSkuFamilyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AzureCloudResourcesConfigExpressRouteCircuit) validateSkuFamily(formats strfmt.Registry) error {
	if swag.IsZero(m.SkuFamily) { // not required
		return nil
	}

	// value enum
	if err := m.validateSkuFamilyEnum("express_route_circuit"+"."+"sku_family", "body", m.SkuFamily); err != nil {
		return err
	}

	return nil
}

var azureCloudResourcesConfigExpressRouteCircuitTypeSkuTierPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Basic","Local","Standard","Premium"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		azureCloudResourcesConfigExpressRouteCircuitTypeSkuTierPropEnum = append(azureCloudResourcesConfigExpressRouteCircuitTypeSkuTierPropEnum, v)
	}
}

const (

	// AzureCloudResourcesConfigExpressRouteCircuitSkuTierBasic captures enum value "Basic"
	AzureCloudResourcesConfigExpressRouteCircuitSkuTierBasic string = "Basic"

	// AzureCloudResourcesConfigExpressRouteCircuitSkuTierLocal captures enum value "Local"
	AzureCloudResourcesConfigExpressRouteCircuitSkuTierLocal string = "Local"

	// AzureCloudResourcesConfigExpressRouteCircuitSkuTierStandard captures enum value "Standard"
	AzureCloudResourcesConfigExpressRouteCircuitSkuTierStandard string = "Standard"

	// AzureCloudResourcesConfigExpressRouteCircuitSkuTierPremium captures enum value "Premium"
	AzureCloudResourcesConfigExpressRouteCircuitSkuTierPremium string = "Premium"
)

// prop value enum
func (m *AzureCloudResourcesConfigExpressRouteCircuit) validateSkuTierEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, azureCloudResourcesConfigExpressRouteCircuitTypeSkuTierPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AzureCloudResourcesConfigExpressRouteCircuit) validateSkuTier(formats strfmt.Registry) error {
	if swag.IsZero(m.SkuTier) { // not required
		return nil
	}

	// value enum
	if err := m.validateSkuTierEnum("express_route_circuit"+"."+"sku_tier", "body", m.SkuTier); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this azure cloud resources config express route circuit based on the context it is used
func (m *AzureCloudResourcesConfigExpressRouteCircuit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePeering(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureCloudResourcesConfigExpressRouteCircuit) contextValidatePeering(ctx context.Context, formats strfmt.Registry) error {

	if m.Peering != nil {
		if err := m.Peering.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("express_route_circuit" + "." + "peering")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("express_route_circuit" + "." + "peering")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureCloudResourcesConfigExpressRouteCircuit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureCloudResourcesConfigExpressRouteCircuit) UnmarshalBinary(b []byte) error {
	var res AzureCloudResourcesConfigExpressRouteCircuit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AzureCloudResourcesConfigExpressRouteCircuitPeering azure cloud resources config express route circuit peering
//
// swagger:model AzureCloudResourcesConfigExpressRouteCircuitPeering
type AzureCloudResourcesConfigExpressRouteCircuitPeering struct {

	// peer asn
	PeerAsn int64 `json:"peer_asn,omitempty"`

	// primary peer address prefix
	PrimaryPeerAddressPrefix string `json:"primary_peer_address_prefix,omitempty"`

	// secondary peer address prefix
	SecondaryPeerAddressPrefix string `json:"secondary_peer_address_prefix,omitempty"`

	// vlan id
	VlanID int64 `json:"vlan_id,omitempty"`
}

// Validate validates this azure cloud resources config express route circuit peering
func (m *AzureCloudResourcesConfigExpressRouteCircuitPeering) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this azure cloud resources config express route circuit peering based on context it is used
func (m *AzureCloudResourcesConfigExpressRouteCircuitPeering) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AzureCloudResourcesConfigExpressRouteCircuitPeering) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureCloudResourcesConfigExpressRouteCircuitPeering) UnmarshalBinary(b []byte) error {
	var res AzureCloudResourcesConfigExpressRouteCircuitPeering
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AzureCloudResourcesConfigGateway azure cloud resources config gateway
//
// swagger:model AzureCloudResourcesConfigGateway
type AzureCloudResourcesConfigGateway struct {

	// active active
	ActiveActive bool `json:"active_active"`

	// enable bgp
	EnableBgp bool `json:"enable_bgp"`

	// sku
	// Enum: [Basic Standard HighPerformance UltraPerformance ErGw1AZ ErGw2AZ ErGw3AZ VpnGw1 VpnGw2 VpnGw3 VpnGw4 VpnGw1AZ VpnGw2AZ VpnGw3AZ VpnGw4AZ VpnGw5AZVpnGw5]
	Sku string `json:"sku"`

	// vpn type
	// Enum: [RouteBased PolicyBased]
	VpnType string `json:"vpn_type,omitempty"`
}

// Validate validates this azure cloud resources config gateway
func (m *AzureCloudResourcesConfigGateway) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSku(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpnType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var azureCloudResourcesConfigGatewayTypeSkuPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Basic","Standard","HighPerformance","UltraPerformance","ErGw1AZ","ErGw2AZ","ErGw3AZ","VpnGw1","VpnGw2","VpnGw3","VpnGw4","VpnGw1AZ","VpnGw2AZ","VpnGw3AZ","VpnGw4AZ","VpnGw5AZVpnGw5"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		azureCloudResourcesConfigGatewayTypeSkuPropEnum = append(azureCloudResourcesConfigGatewayTypeSkuPropEnum, v)
	}
}

const (

	// AzureCloudResourcesConfigGatewaySkuBasic captures enum value "Basic"
	AzureCloudResourcesConfigGatewaySkuBasic string = "Basic"

	// AzureCloudResourcesConfigGatewaySkuStandard captures enum value "Standard"
	AzureCloudResourcesConfigGatewaySkuStandard string = "Standard"

	// AzureCloudResourcesConfigGatewaySkuHighPerformance captures enum value "HighPerformance"
	AzureCloudResourcesConfigGatewaySkuHighPerformance string = "HighPerformance"

	// AzureCloudResourcesConfigGatewaySkuUltraPerformance captures enum value "UltraPerformance"
	AzureCloudResourcesConfigGatewaySkuUltraPerformance string = "UltraPerformance"

	// AzureCloudResourcesConfigGatewaySkuErGw1AZ captures enum value "ErGw1AZ"
	AzureCloudResourcesConfigGatewaySkuErGw1AZ string = "ErGw1AZ"

	// AzureCloudResourcesConfigGatewaySkuErGw2AZ captures enum value "ErGw2AZ"
	AzureCloudResourcesConfigGatewaySkuErGw2AZ string = "ErGw2AZ"

	// AzureCloudResourcesConfigGatewaySkuErGw3AZ captures enum value "ErGw3AZ"
	AzureCloudResourcesConfigGatewaySkuErGw3AZ string = "ErGw3AZ"

	// AzureCloudResourcesConfigGatewaySkuVpnGw1 captures enum value "VpnGw1"
	AzureCloudResourcesConfigGatewaySkuVpnGw1 string = "VpnGw1"

	// AzureCloudResourcesConfigGatewaySkuVpnGw2 captures enum value "VpnGw2"
	AzureCloudResourcesConfigGatewaySkuVpnGw2 string = "VpnGw2"

	// AzureCloudResourcesConfigGatewaySkuVpnGw3 captures enum value "VpnGw3"
	AzureCloudResourcesConfigGatewaySkuVpnGw3 string = "VpnGw3"

	// AzureCloudResourcesConfigGatewaySkuVpnGw4 captures enum value "VpnGw4"
	AzureCloudResourcesConfigGatewaySkuVpnGw4 string = "VpnGw4"

	// AzureCloudResourcesConfigGatewaySkuVpnGw1AZ captures enum value "VpnGw1AZ"
	AzureCloudResourcesConfigGatewaySkuVpnGw1AZ string = "VpnGw1AZ"

	// AzureCloudResourcesConfigGatewaySkuVpnGw2AZ captures enum value "VpnGw2AZ"
	AzureCloudResourcesConfigGatewaySkuVpnGw2AZ string = "VpnGw2AZ"

	// AzureCloudResourcesConfigGatewaySkuVpnGw3AZ captures enum value "VpnGw3AZ"
	AzureCloudResourcesConfigGatewaySkuVpnGw3AZ string = "VpnGw3AZ"

	// AzureCloudResourcesConfigGatewaySkuVpnGw4AZ captures enum value "VpnGw4AZ"
	AzureCloudResourcesConfigGatewaySkuVpnGw4AZ string = "VpnGw4AZ"

	// AzureCloudResourcesConfigGatewaySkuVpnGw5AZVpnGw5 captures enum value "VpnGw5AZVpnGw5"
	AzureCloudResourcesConfigGatewaySkuVpnGw5AZVpnGw5 string = "VpnGw5AZVpnGw5"
)

// prop value enum
func (m *AzureCloudResourcesConfigGateway) validateSkuEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, azureCloudResourcesConfigGatewayTypeSkuPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AzureCloudResourcesConfigGateway) validateSku(formats strfmt.Registry) error {
	if swag.IsZero(m.Sku) { // not required
		return nil
	}

	// value enum
	if err := m.validateSkuEnum("gateway"+"."+"sku", "body", m.Sku); err != nil {
		return err
	}

	return nil
}

var azureCloudResourcesConfigGatewayTypeVpnTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RouteBased","PolicyBased"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		azureCloudResourcesConfigGatewayTypeVpnTypePropEnum = append(azureCloudResourcesConfigGatewayTypeVpnTypePropEnum, v)
	}
}

const (

	// AzureCloudResourcesConfigGatewayVpnTypeRouteBased captures enum value "RouteBased"
	AzureCloudResourcesConfigGatewayVpnTypeRouteBased string = "RouteBased"

	// AzureCloudResourcesConfigGatewayVpnTypePolicyBased captures enum value "PolicyBased"
	AzureCloudResourcesConfigGatewayVpnTypePolicyBased string = "PolicyBased"
)

// prop value enum
func (m *AzureCloudResourcesConfigGateway) validateVpnTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, azureCloudResourcesConfigGatewayTypeVpnTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AzureCloudResourcesConfigGateway) validateVpnType(formats strfmt.Registry) error {
	if swag.IsZero(m.VpnType) { // not required
		return nil
	}

	// value enum
	if err := m.validateVpnTypeEnum("gateway"+"."+"vpn_type", "body", m.VpnType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this azure cloud resources config gateway based on context it is used
func (m *AzureCloudResourcesConfigGateway) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AzureCloudResourcesConfigGateway) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureCloudResourcesConfigGateway) UnmarshalBinary(b []byte) error {
	var res AzureCloudResourcesConfigGateway
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AzureCloudResourcesConfigNetwork azure cloud resources config network
//
// swagger:model AzureCloudResourcesConfigNetwork
type AzureCloudResourcesConfigNetwork struct {

	// cidr
	// Min Length: 8
	Cidr string `json:"cidr,omitempty"`

	// gateway subnet
	// Min Length: 8
	GatewaySubnet string `json:"gateway_subnet,omitempty"`
}

// Validate validates this azure cloud resources config network
func (m *AzureCloudResourcesConfigNetwork) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCidr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGatewaySubnet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureCloudResourcesConfigNetwork) validateCidr(formats strfmt.Registry) error {
	if swag.IsZero(m.Cidr) { // not required
		return nil
	}

	if err := validate.MinLength("network"+"."+"cidr", "body", m.Cidr, 8); err != nil {
		return err
	}

	return nil
}

func (m *AzureCloudResourcesConfigNetwork) validateGatewaySubnet(formats strfmt.Registry) error {
	if swag.IsZero(m.GatewaySubnet) { // not required
		return nil
	}

	if err := validate.MinLength("network"+"."+"gateway_subnet", "body", m.GatewaySubnet, 8); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this azure cloud resources config network based on context it is used
func (m *AzureCloudResourcesConfigNetwork) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AzureCloudResourcesConfigNetwork) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureCloudResourcesConfigNetwork) UnmarshalBinary(b []byte) error {
	var res AzureCloudResourcesConfigNetwork
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
