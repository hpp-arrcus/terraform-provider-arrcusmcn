// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ArcCostDeviceInfo arc cost device info
//
// swagger:model arc_cost_device_info
type ArcCostDeviceInfo struct {

	// active price function
	// Read Only: true
	ActivePriceFunction *ArcCostPriceFunction `json:"activePriceFunction,omitempty"`

	// currency code
	CurrencyCode string `json:"currencyCode,omitempty"`

	// day octets info
	// Read Only: true
	DayOctetsInfo *ArcCostOctetsInfo `json:"dayOctetsInfo,omitempty"`

	// device Id
	DeviceID string `json:"deviceId,omitempty"`

	// error
	Error string `json:"error,omitempty"`

	// hourly octet
	HourlyOctet []*ArcCostHourlyOctet `json:"hourlyOctet"`

	// in octect cost
	// Read Only: true
	InOctectCost float64 `json:"inOctectCost,omitempty"`

	// in octets
	InOctets float64 `json:"inOctets,omitempty"`

	// interface Id
	InterfaceID string `json:"interfaceId,omitempty"`

	// month octets info
	// Read Only: true
	MonthOctetsInfo *ArcCostOctetsInfo `json:"monthOctetsInfo,omitempty"`

	// omni insight
	OmniInsight string `json:"omniInsight,omitempty"`

	// out octect cost
	// Read Only: true
	OutOctectCost float64 `json:"outOctectCost,omitempty"`

	// out octets
	OutOctets float64 `json:"outOctets,omitempty"`

	// week octets info
	// Read Only: true
	WeekOctetsInfo *ArcCostOctetsInfo `json:"weekOctetsInfo,omitempty"`
}

// Validate validates this arc cost device info
func (m *ArcCostDeviceInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivePriceFunction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDayOctetsInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHourlyOctet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonthOctetsInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeekOctetsInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArcCostDeviceInfo) validateActivePriceFunction(formats strfmt.Registry) error {
	if swag.IsZero(m.ActivePriceFunction) { // not required
		return nil
	}

	if m.ActivePriceFunction != nil {
		if err := m.ActivePriceFunction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activePriceFunction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activePriceFunction")
			}
			return err
		}
	}

	return nil
}

func (m *ArcCostDeviceInfo) validateDayOctetsInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DayOctetsInfo) { // not required
		return nil
	}

	if m.DayOctetsInfo != nil {
		if err := m.DayOctetsInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dayOctetsInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dayOctetsInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ArcCostDeviceInfo) validateHourlyOctet(formats strfmt.Registry) error {
	if swag.IsZero(m.HourlyOctet) { // not required
		return nil
	}

	for i := 0; i < len(m.HourlyOctet); i++ {
		if swag.IsZero(m.HourlyOctet[i]) { // not required
			continue
		}

		if m.HourlyOctet[i] != nil {
			if err := m.HourlyOctet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hourlyOctet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hourlyOctet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ArcCostDeviceInfo) validateMonthOctetsInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.MonthOctetsInfo) { // not required
		return nil
	}

	if m.MonthOctetsInfo != nil {
		if err := m.MonthOctetsInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monthOctetsInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monthOctetsInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ArcCostDeviceInfo) validateWeekOctetsInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.WeekOctetsInfo) { // not required
		return nil
	}

	if m.WeekOctetsInfo != nil {
		if err := m.WeekOctetsInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("weekOctetsInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("weekOctetsInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this arc cost device info based on the context it is used
func (m *ArcCostDeviceInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActivePriceFunction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDayOctetsInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHourlyOctet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInOctectCost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMonthOctetsInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutOctectCost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWeekOctetsInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArcCostDeviceInfo) contextValidateActivePriceFunction(ctx context.Context, formats strfmt.Registry) error {

	if m.ActivePriceFunction != nil {
		if err := m.ActivePriceFunction.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activePriceFunction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activePriceFunction")
			}
			return err
		}
	}

	return nil
}

func (m *ArcCostDeviceInfo) contextValidateDayOctetsInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DayOctetsInfo != nil {
		if err := m.DayOctetsInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dayOctetsInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dayOctetsInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ArcCostDeviceInfo) contextValidateHourlyOctet(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HourlyOctet); i++ {

		if m.HourlyOctet[i] != nil {
			if err := m.HourlyOctet[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hourlyOctet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hourlyOctet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ArcCostDeviceInfo) contextValidateInOctectCost(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "inOctectCost", "body", float64(m.InOctectCost)); err != nil {
		return err
	}

	return nil
}

func (m *ArcCostDeviceInfo) contextValidateMonthOctetsInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.MonthOctetsInfo != nil {
		if err := m.MonthOctetsInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monthOctetsInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monthOctetsInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ArcCostDeviceInfo) contextValidateOutOctectCost(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "outOctectCost", "body", float64(m.OutOctectCost)); err != nil {
		return err
	}

	return nil
}

func (m *ArcCostDeviceInfo) contextValidateWeekOctetsInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.WeekOctetsInfo != nil {
		if err := m.WeekOctetsInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("weekOctetsInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("weekOctetsInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArcCostDeviceInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArcCostDeviceInfo) UnmarshalBinary(b []byte) error {
	var res ArcCostDeviceInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
