// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupConfig backup config
//
// swagger:model backup_config
type BackupConfig struct {

	// backup id
	// Read Only: true
	// Min Length: 1
	BackupID string `json:"backup_id,omitempty"`

	// credentials
	// Required: true
	Credentials struct {
		AwsBackup

		OnpremBackup
	} `json:"credentials"`

	// provider
	// Required: true
	Provider *string `json:"provider"`

	// use default
	// Required: true
	UseDefault *bool `json:"use_default"`
}

// Validate validates this backup config
func (m *BackupConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUseDefault(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupConfig) validateBackupID(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupID) { // not required
		return nil
	}

	if err := validate.MinLength("backup_id", "body", m.BackupID, 1); err != nil {
		return err
	}

	return nil
}

func (m *BackupConfig) validateCredentials(formats strfmt.Registry) error {

	return nil
}

func (m *BackupConfig) validateProvider(formats strfmt.Registry) error {

	if err := validate.Required("provider", "body", m.Provider); err != nil {
		return err
	}

	return nil
}

func (m *BackupConfig) validateUseDefault(formats strfmt.Registry) error {

	if err := validate.Required("use_default", "body", m.UseDefault); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this backup config based on the context it is used
func (m *BackupConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBackupID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupConfig) contextValidateBackupID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "backup_id", "body", string(m.BackupID)); err != nil {
		return err
	}

	return nil
}

func (m *BackupConfig) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *BackupConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupConfig) UnmarshalBinary(b []byte) error {
	var res BackupConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
