// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TunnelInterface tunnel interface
//
// swagger:model tunnel_interface
type TunnelInterface struct {

	// description
	// Min Length: 1
	Description string `json:"description,omitempty"`

	// dscp key
	DscpKey int64 `json:"dscp_key,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// ip address
	IPAddress string `json:"ip_address,omitempty"`

	// mtu
	Mtu int64 `json:"mtu,omitempty"`

	// prefix length
	PrefixLength int64 `json:"prefix_length,omitempty"`

	// tunnel dst ip
	TunnelDstIP string `json:"tunnel_dst_ip,omitempty"`

	// tunnel mode
	TunnelMode string `json:"tunnel_mode,omitempty"`

	// tunnel src ip
	TunnelSrcIP string `json:"tunnel_src_ip,omitempty"`
}

// Validate validates this tunnel interface
func (m *TunnelInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TunnelInterface) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", m.Description, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this tunnel interface based on context it is used
func (m *TunnelInterface) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TunnelInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TunnelInterface) UnmarshalBinary(b []byte) error {
	var res TunnelInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
