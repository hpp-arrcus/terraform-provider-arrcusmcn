// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Operation operation
//
// swagger:model Operation
type Operation string

func NewOperation(value Operation) *Operation {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Operation.
func (m Operation) Pointer() *Operation {
	return &m
}

const (

	// OperationAdd captures enum value "Add"
	OperationAdd Operation = "Add"

	// OperationUpdate captures enum value "Update"
	OperationUpdate Operation = "Update"

	// OperationDelete captures enum value "Delete"
	OperationDelete Operation = "Delete"
)

// for schema
var operationEnum []interface{}

func init() {
	var res []Operation
	if err := json.Unmarshal([]byte(`["Add","Update","Delete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		operationEnum = append(operationEnum, v)
	}
}

func (m Operation) validateOperationEnum(path, location string, value Operation) error {
	if err := validate.EnumCase(path, location, value, operationEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this operation
func (m Operation) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOperationEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this operation based on context it is used
func (m Operation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
