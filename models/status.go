// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Status status
//
// swagger:model Status
type Status string

func NewStatus(value Status) *Status {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Status.
func (m Status) Pointer() *Status {
	return &m
}

const (

	// StatusNotRunning captures enum value "NotRunning"
	StatusNotRunning Status = "NotRunning"

	// StatusInProgress captures enum value "InProgress"
	StatusInProgress Status = "InProgress"

	// StatusSuccess captures enum value "Success"
	StatusSuccess Status = "Success"

	// StatusError captures enum value "Error"
	StatusError Status = "Error"

	// StatusFailure captures enum value "Failure"
	StatusFailure Status = "Failure"

	// StatusTimedOut captures enum value "TimedOut"
	StatusTimedOut Status = "TimedOut"
)

// for schema
var statusEnum []interface{}

func init() {
	var res []Status
	if err := json.Unmarshal([]byte(`["NotRunning","InProgress","Success","Error","Failure","TimedOut"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		statusEnum = append(statusEnum, v)
	}
}

func (m Status) validateStatusEnum(path, location string, value Status) error {
	if err := validate.EnumCase(path, location, value, statusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this status
func (m Status) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this status based on context it is used
func (m Status) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
