// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Csps csps
//
// swagger:model Csps
type Csps string

func NewCsps(value Csps) *Csps {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Csps.
func (m Csps) Pointer() *Csps {
	return &m
}

const (

	// CspsAws captures enum value "aws"
	CspsAws Csps = "aws"

	// CspsGcp captures enum value "gcp"
	CspsGcp Csps = "gcp"

	// CspsAzure captures enum value "azure"
	CspsAzure Csps = "azure"

	// CspsOci captures enum value "oci"
	CspsOci Csps = "oci"
)

// for schema
var cspsEnum []interface{}

func init() {
	var res []Csps
	if err := json.Unmarshal([]byte(`["aws","gcp","azure","oci"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cspsEnum = append(cspsEnum, v)
	}
}

func (m Csps) validateCspsEnum(path, location string, value Csps) error {
	if err := validate.EnumCase(path, location, value, cspsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this csps
func (m Csps) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCspsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this csps based on context it is used
func (m Csps) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
