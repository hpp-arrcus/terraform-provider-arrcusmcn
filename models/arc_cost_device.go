// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ArcCostDevice arc cost device
//
// swagger:model arc_cost_device
type ArcCostDevice struct {

	// device ids
	DeviceIds map[string][]ArcCostInterfaces `json:"deviceIds,omitempty"`

	// host name
	HostName string `json:"hostName,omitempty"`
}

// Validate validates this arc cost device
func (m *ArcCostDevice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArcCostDevice) validateDeviceIds(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceIds) { // not required
		return nil
	}

	for k := range m.DeviceIds {

		if err := validate.Required("deviceIds"+"."+k, "body", m.DeviceIds[k]); err != nil {
			return err
		}

		for i := 0; i < len(m.DeviceIds[k]); i++ {

			if err := m.DeviceIds[k][i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deviceIds" + "." + k + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deviceIds" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

// ContextValidate validate this arc cost device based on the context it is used
func (m *ArcCostDevice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeviceIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArcCostDevice) contextValidateDeviceIds(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.DeviceIds {

		for i := 0; i < len(m.DeviceIds[k]); i++ {

			if err := m.DeviceIds[k][i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deviceIds" + "." + k + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deviceIds" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArcCostDevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArcCostDevice) UnmarshalBinary(b []byte) error {
	var res ArcCostDevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
