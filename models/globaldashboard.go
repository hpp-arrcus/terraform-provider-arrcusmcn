// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Globaldashboard globaldashboard
//
// swagger:model globaldashboard
type Globaldashboard struct {

	// arcedgeversions
	// Read Only: true
	Arcedgeversions []string `json:"arcedgeversions"`

	// id
	// Read Only: true
	// Format: ObjectId
	ID *strfmt.ObjectId `json:"id,omitempty" bson:"_id, omitempty"`

	// numadmins
	// Read Only: true
	Numadmins int64 `json:"numadmins"`

	// numclouddeployments
	// Read Only: true
	Numclouddeployments int64 `json:"numclouddeployments"`

	// numdeployments
	// Read Only: true
	Numdeployments int64 `json:"numdeployments"`

	// numonpremdeployments
	// Read Only: true
	Numonpremdeployments int64 `json:"numonpremdeployments"`

	// numoperators
	// Read Only: true
	Numoperators int64 `json:"numoperators"`

	// numupgradesavailable
	// Read Only: true
	Numupgradesavailable int64 `json:"numupgradesavailable"`
}

// Validate validates this globaldashboard
func (m *Globaldashboard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Globaldashboard) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "ObjectId", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this globaldashboard based on the context it is used
func (m *Globaldashboard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArcedgeversions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNumadmins(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNumclouddeployments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNumdeployments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNumonpremdeployments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNumoperators(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNumupgradesavailable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Globaldashboard) contextValidateArcedgeversions(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "arcedgeversions", "body", []string(m.Arcedgeversions)); err != nil {
		return err
	}

	return nil
}

func (m *Globaldashboard) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Globaldashboard) contextValidateNumadmins(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "numadmins", "body", int64(m.Numadmins)); err != nil {
		return err
	}

	return nil
}

func (m *Globaldashboard) contextValidateNumclouddeployments(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "numclouddeployments", "body", int64(m.Numclouddeployments)); err != nil {
		return err
	}

	return nil
}

func (m *Globaldashboard) contextValidateNumdeployments(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "numdeployments", "body", int64(m.Numdeployments)); err != nil {
		return err
	}

	return nil
}

func (m *Globaldashboard) contextValidateNumonpremdeployments(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "numonpremdeployments", "body", int64(m.Numonpremdeployments)); err != nil {
		return err
	}

	return nil
}

func (m *Globaldashboard) contextValidateNumoperators(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "numoperators", "body", int64(m.Numoperators)); err != nil {
		return err
	}

	return nil
}

func (m *Globaldashboard) contextValidateNumupgradesavailable(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "numupgradesavailable", "body", int64(m.Numupgradesavailable)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Globaldashboard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Globaldashboard) UnmarshalBinary(b []byte) error {
	var res Globaldashboard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
