// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Rolename rolename
//
// swagger:model rolename
type Rolename string

func NewRolename(value Rolename) *Rolename {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Rolename.
func (m Rolename) Pointer() *Rolename {
	return &m
}

const (

	// RolenameArcOrchAdmin captures enum value "ArcOrchAdmin"
	RolenameArcOrchAdmin Rolename = "ArcOrchAdmin"

	// RolenameTenantAdmin captures enum value "TenantAdmin"
	RolenameTenantAdmin Rolename = "TenantAdmin"

	// RolenameTenantOperator captures enum value "TenantOperator"
	RolenameTenantOperator Rolename = "TenantOperator"

	// RolenameDashboardReader captures enum value "DashboardReader"
	RolenameDashboardReader Rolename = "DashboardReader"
)

// for schema
var rolenameEnum []interface{}

func init() {
	var res []Rolename
	if err := json.Unmarshal([]byte(`["ArcOrchAdmin","TenantAdmin","TenantOperator","DashboardReader"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rolenameEnum = append(rolenameEnum, v)
	}
}

func (m Rolename) validateRolenameEnum(path, location string, value Rolename) error {
	if err := validate.EnumCase(path, location, value, rolenameEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this rolename
func (m Rolename) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRolenameEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this rolename based on context it is used
func (m Rolename) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
