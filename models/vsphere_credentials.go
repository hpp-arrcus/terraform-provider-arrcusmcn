// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VsphereCredentials vsphere credentials
//
// swagger:model vsphere_credentials
type VsphereCredentials struct {

	// id
	// Min Length: 1
	ID string `json:"id,omitempty"`

	// vsphere coordinates
	VsphereCoordinates *Coordinates `json:"vsphere_coordinates,omitempty"`

	// vsphere domain
	// Min Length: 1
	VsphereDomain string `json:"vsphere_domain,omitempty"`

	// vsphere password
	// Min Length: 1
	VspherePassword string `json:"vsphere_password,omitempty"`

	// vsphere server ip
	// Min Length: 1
	VsphereServerIP string `json:"vsphere_server_ip,omitempty"`

	// vsphere site address
	VsphereSiteAddress string `json:"vsphere_site_address,omitempty"`

	// vsphere username
	// Min Length: 1
	VsphereUsername string `json:"vsphere_username,omitempty"`
}

// Validate validates this vsphere credentials
func (m *VsphereCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVsphereCoordinates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVsphereDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVspherePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVsphereServerIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVsphereUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VsphereCredentials) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", m.ID, 1); err != nil {
		return err
	}

	return nil
}

func (m *VsphereCredentials) validateVsphereCoordinates(formats strfmt.Registry) error {
	if swag.IsZero(m.VsphereCoordinates) { // not required
		return nil
	}

	if m.VsphereCoordinates != nil {
		if err := m.VsphereCoordinates.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vsphere_coordinates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vsphere_coordinates")
			}
			return err
		}
	}

	return nil
}

func (m *VsphereCredentials) validateVsphereDomain(formats strfmt.Registry) error {
	if swag.IsZero(m.VsphereDomain) { // not required
		return nil
	}

	if err := validate.MinLength("vsphere_domain", "body", m.VsphereDomain, 1); err != nil {
		return err
	}

	return nil
}

func (m *VsphereCredentials) validateVspherePassword(formats strfmt.Registry) error {
	if swag.IsZero(m.VspherePassword) { // not required
		return nil
	}

	if err := validate.MinLength("vsphere_password", "body", m.VspherePassword, 1); err != nil {
		return err
	}

	return nil
}

func (m *VsphereCredentials) validateVsphereServerIP(formats strfmt.Registry) error {
	if swag.IsZero(m.VsphereServerIP) { // not required
		return nil
	}

	if err := validate.MinLength("vsphere_server_ip", "body", m.VsphereServerIP, 1); err != nil {
		return err
	}

	return nil
}

func (m *VsphereCredentials) validateVsphereUsername(formats strfmt.Registry) error {
	if swag.IsZero(m.VsphereUsername) { // not required
		return nil
	}

	if err := validate.MinLength("vsphere_username", "body", m.VsphereUsername, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this vsphere credentials based on the context it is used
func (m *VsphereCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVsphereCoordinates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VsphereCredentials) contextValidateVsphereCoordinates(ctx context.Context, formats strfmt.Registry) error {

	if m.VsphereCoordinates != nil {
		if err := m.VsphereCoordinates.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vsphere_coordinates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vsphere_coordinates")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VsphereCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VsphereCredentials) UnmarshalBinary(b []byte) error {
	var res VsphereCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
