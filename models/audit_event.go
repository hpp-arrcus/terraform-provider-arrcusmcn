// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuditEvent audit event
//
// swagger:model audit_event
type AuditEvent struct {

	// id
	// Format: ObjectId
	ID strfmt.ObjectId `json:"_id,omitempty"`

	// details
	Details string `json:"details,omitempty"`

	// operation
	Operation string `json:"operation,omitempty"`

	// resource
	// Enum: [tenants users cloud_credentials deployments upgrade cloud_resources]
	Resource string `json:"resource,omitempty"`

	// status
	// Enum: [success failed]
	Status string `json:"status,omitempty"`

	// timestamp
	Timestamp int64 `json:"timestamp,omitempty"`

	// userid
	Userid string `json:"userid,omitempty"`

	// username
	Username string `json:"username,omitempty"`

	// userrole
	Userrole Rolename `json:"userrole,omitempty"`
}

// Validate validates this audit event
func (m *AuditEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserrole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditEvent) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("_id", "body", "ObjectId", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

var auditEventTypeResourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tenants","users","cloud_credentials","deployments","upgrade","cloud_resources"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		auditEventTypeResourcePropEnum = append(auditEventTypeResourcePropEnum, v)
	}
}

const (

	// AuditEventResourceTenants captures enum value "tenants"
	AuditEventResourceTenants string = "tenants"

	// AuditEventResourceUsers captures enum value "users"
	AuditEventResourceUsers string = "users"

	// AuditEventResourceCloudCredentials captures enum value "cloud_credentials"
	AuditEventResourceCloudCredentials string = "cloud_credentials"

	// AuditEventResourceDeployments captures enum value "deployments"
	AuditEventResourceDeployments string = "deployments"

	// AuditEventResourceUpgrade captures enum value "upgrade"
	AuditEventResourceUpgrade string = "upgrade"

	// AuditEventResourceCloudResources captures enum value "cloud_resources"
	AuditEventResourceCloudResources string = "cloud_resources"
)

// prop value enum
func (m *AuditEvent) validateResourceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, auditEventTypeResourcePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AuditEvent) validateResource(formats strfmt.Registry) error {
	if swag.IsZero(m.Resource) { // not required
		return nil
	}

	// value enum
	if err := m.validateResourceEnum("resource", "body", m.Resource); err != nil {
		return err
	}

	return nil
}

var auditEventTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["success","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		auditEventTypeStatusPropEnum = append(auditEventTypeStatusPropEnum, v)
	}
}

const (

	// AuditEventStatusSuccess captures enum value "success"
	AuditEventStatusSuccess string = "success"

	// AuditEventStatusFailed captures enum value "failed"
	AuditEventStatusFailed string = "failed"
)

// prop value enum
func (m *AuditEvent) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, auditEventTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AuditEvent) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *AuditEvent) validateUserrole(formats strfmt.Registry) error {
	if swag.IsZero(m.Userrole) { // not required
		return nil
	}

	if err := m.Userrole.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("userrole")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("userrole")
		}
		return err
	}

	return nil
}

// ContextValidate validate this audit event based on the context it is used
func (m *AuditEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUserrole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditEvent) contextValidateUserrole(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Userrole.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("userrole")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("userrole")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuditEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuditEvent) UnmarshalBinary(b []byte) error {
	var res AuditEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
