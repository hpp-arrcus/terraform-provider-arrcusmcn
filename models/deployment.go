// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Deployment deployment
//
// swagger:model deployment
type Deployment struct {

	// action
	Action string `json:"action,omitempty"`

	// active ip gateway
	ActiveIPGateway string `json:"active_ip_gateway,omitempty"`

	// active network interfaces
	// Read Only: true
	ActiveNetworkInterfaces []*NetworkInterface `json:"active_network_interfaces"`

	// admin password
	AdminPassword string `json:"adminPassword,omitempty"`

	// arc orch ip
	// Min Length: 1
	ArcOrchIP string `json:"arc_orch_ip,omitempty"`

	// arcedge a ip
	ArcedgeAIP string `json:"arcedgeA_ip,omitempty"`

	// arcedge a private ip
	ArcedgeAPrivateIP string `json:"arcedgeA_private_ip,omitempty"`

	// arcedge a role
	ArcedgeARole ArcedgeRole `json:"arcedgeA_role,omitempty"`

	// arcedge a status
	ArcedgeAStatus string `json:"arcedgeA_status,omitempty"`

	// arcedge a status id
	ArcedgeAStatusID int64 `json:"arcedgeA_status_id,omitempty"`

	// arcedge a system name
	// Read Only: true
	ArcedgeASystemName string `json:"arcedgeA_system_name,omitempty"`

	// arcedge b ip
	ArcedgeBIP string `json:"arcedgeB_ip,omitempty"`

	// arcedge b private ip
	ArcedgeBPrivateIP string `json:"arcedgeB_private_ip,omitempty"`

	// arcedge b role
	ArcedgeBRole ArcedgeRole `json:"arcedgeB_role,omitempty"`

	// arcedge b status
	ArcedgeBStatus string `json:"arcedgeB_status,omitempty"`

	// arcedge b status id
	ArcedgeBStatusID int64 `json:"arcedgeB_status_id,omitempty"`

	// arcedge b system name
	// Read Only: true
	ArcedgeBSystemName string `json:"arcedgeB_system_name,omitempty"`

	// aws deployment
	AwsDeployment *AwsDeployment `json:"aws_deployment,omitempty"`

	// azure deployment
	AzureDeployment *AzureDeployment `json:"azure_deployment,omitempty"`

	// backup network interfaces
	// Read Only: true
	BackupNetworkInterfaces []*NetworkInterface `json:"backup_network_interfaces"`

	// coordinates
	Coordinates *Coordinates `json:"coordinates,omitempty"`

	// credential name
	// Min Length: 1
	CredentialName string `json:"credential_name,omitempty"`

	// credentials
	Credentials struct {
		AwsCredentials

		AzureCredentials

		GcpCredentials

		OciCredentials

		OnpremCredentials

		VsphereCredentials
	} `json:"credentials,omitempty"`

	// credentials id
	// Read Only: true
	CredentialsID string `json:"credentials_id,omitempty"`

	// enable high availability
	// Required: true
	EnableHighAvailability *bool `json:"enable_high_availability"`

	// enable private subnet
	EnablePrivateSubnet bool `json:"enable_private_subnet,omitempty"`

	// gcp deployment
	GcpDeployment *GcpDeployment `json:"gcp_deployment,omitempty"`

	// hub number
	HubNumber int64 `json:"hubNumber,omitempty"`

	// id
	// Read Only: true
	// Min Length: 1
	// Format: ObjectId
	ID *strfmt.ObjectId `json:"id,omitempty" bson:"_id, omitempty"`

	// ingress sg
	IngressSg string `json:"ingress_sg,omitempty"`

	// latest available image
	// Read Only: true
	LatestAvailableImage *ArcedgeImage `json:"latest_available_image,omitempty"`

	// name
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// oci deployment
	OciDeployment *OciDeployment `json:"oci_deployment,omitempty"`

	// onprem deployment
	OnpremDeployment *OnpremDeployment `json:"onprem_deployment,omitempty"`

	// private cidr
	PrivateCidr string `json:"private_cidr,omitempty"`

	// provider
	Provider Providers `json:"provider,omitempty"`

	// source image
	// Required: true
	// Read Only: true
	SourceImage *ArcedgeImage `json:"source_image"`

	// status
	Status string `json:"status,omitempty"`

	// status id
	StatusID int64 `json:"status_id,omitempty"`

	// upgrade available
	// Read Only: true
	UpgradeAvailable *bool `json:"upgrade_available,omitempty"`

	// vsphere deployment
	VsphereDeployment *VsphereDeployment `json:"vsphere_deployment,omitempty"`
}

// Validate validates this deployment
func (m *Deployment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveNetworkInterfaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArcOrchIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArcedgeARole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArcedgeBRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsDeployment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureDeployment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupNetworkInterfaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCoordinates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentialName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableHighAvailability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcpDeployment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatestAvailableImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOciDeployment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnpremDeployment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVsphereDeployment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Deployment) validateActiveNetworkInterfaces(formats strfmt.Registry) error {
	if swag.IsZero(m.ActiveNetworkInterfaces) { // not required
		return nil
	}

	for i := 0; i < len(m.ActiveNetworkInterfaces); i++ {
		if swag.IsZero(m.ActiveNetworkInterfaces[i]) { // not required
			continue
		}

		if m.ActiveNetworkInterfaces[i] != nil {
			if err := m.ActiveNetworkInterfaces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("active_network_interfaces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("active_network_interfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Deployment) validateArcOrchIP(formats strfmt.Registry) error {
	if swag.IsZero(m.ArcOrchIP) { // not required
		return nil
	}

	if err := validate.MinLength("arc_orch_ip", "body", m.ArcOrchIP, 1); err != nil {
		return err
	}

	return nil
}

func (m *Deployment) validateArcedgeARole(formats strfmt.Registry) error {
	if swag.IsZero(m.ArcedgeARole) { // not required
		return nil
	}

	if err := m.ArcedgeARole.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("arcedgeA_role")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("arcedgeA_role")
		}
		return err
	}

	return nil
}

func (m *Deployment) validateArcedgeBRole(formats strfmt.Registry) error {
	if swag.IsZero(m.ArcedgeBRole) { // not required
		return nil
	}

	if err := m.ArcedgeBRole.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("arcedgeB_role")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("arcedgeB_role")
		}
		return err
	}

	return nil
}

func (m *Deployment) validateAwsDeployment(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsDeployment) { // not required
		return nil
	}

	if m.AwsDeployment != nil {
		if err := m.AwsDeployment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws_deployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aws_deployment")
			}
			return err
		}
	}

	return nil
}

func (m *Deployment) validateAzureDeployment(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureDeployment) { // not required
		return nil
	}

	if m.AzureDeployment != nil {
		if err := m.AzureDeployment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure_deployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azure_deployment")
			}
			return err
		}
	}

	return nil
}

func (m *Deployment) validateBackupNetworkInterfaces(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupNetworkInterfaces) { // not required
		return nil
	}

	for i := 0; i < len(m.BackupNetworkInterfaces); i++ {
		if swag.IsZero(m.BackupNetworkInterfaces[i]) { // not required
			continue
		}

		if m.BackupNetworkInterfaces[i] != nil {
			if err := m.BackupNetworkInterfaces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backup_network_interfaces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("backup_network_interfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Deployment) validateCoordinates(formats strfmt.Registry) error {
	if swag.IsZero(m.Coordinates) { // not required
		return nil
	}

	if m.Coordinates != nil {
		if err := m.Coordinates.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("coordinates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("coordinates")
			}
			return err
		}
	}

	return nil
}

func (m *Deployment) validateCredentialName(formats strfmt.Registry) error {
	if swag.IsZero(m.CredentialName) { // not required
		return nil
	}

	if err := validate.MinLength("credential_name", "body", m.CredentialName, 1); err != nil {
		return err
	}

	return nil
}

func (m *Deployment) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	return nil
}

func (m *Deployment) validateEnableHighAvailability(formats strfmt.Registry) error {

	if err := validate.Required("enable_high_availability", "body", m.EnableHighAvailability); err != nil {
		return err
	}

	return nil
}

func (m *Deployment) validateGcpDeployment(formats strfmt.Registry) error {
	if swag.IsZero(m.GcpDeployment) { // not required
		return nil
	}

	if m.GcpDeployment != nil {
		if err := m.GcpDeployment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcp_deployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcp_deployment")
			}
			return err
		}
	}

	return nil
}

func (m *Deployment) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", m.ID.String(), 1); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "ObjectId", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Deployment) validateLatestAvailableImage(formats strfmt.Registry) error {
	if swag.IsZero(m.LatestAvailableImage) { // not required
		return nil
	}

	if m.LatestAvailableImage != nil {
		if err := m.LatestAvailableImage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latest_available_image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("latest_available_image")
			}
			return err
		}
	}

	return nil
}

func (m *Deployment) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	return nil
}

func (m *Deployment) validateOciDeployment(formats strfmt.Registry) error {
	if swag.IsZero(m.OciDeployment) { // not required
		return nil
	}

	if m.OciDeployment != nil {
		if err := m.OciDeployment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oci_deployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oci_deployment")
			}
			return err
		}
	}

	return nil
}

func (m *Deployment) validateOnpremDeployment(formats strfmt.Registry) error {
	if swag.IsZero(m.OnpremDeployment) { // not required
		return nil
	}

	if m.OnpremDeployment != nil {
		if err := m.OnpremDeployment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("onprem_deployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("onprem_deployment")
			}
			return err
		}
	}

	return nil
}

func (m *Deployment) validateProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.Provider) { // not required
		return nil
	}

	if err := m.Provider.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("provider")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("provider")
		}
		return err
	}

	return nil
}

func (m *Deployment) validateSourceImage(formats strfmt.Registry) error {

	if err := validate.Required("source_image", "body", m.SourceImage); err != nil {
		return err
	}

	if m.SourceImage != nil {
		if err := m.SourceImage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source_image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source_image")
			}
			return err
		}
	}

	return nil
}

func (m *Deployment) validateVsphereDeployment(formats strfmt.Registry) error {
	if swag.IsZero(m.VsphereDeployment) { // not required
		return nil
	}

	if m.VsphereDeployment != nil {
		if err := m.VsphereDeployment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vsphere_deployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vsphere_deployment")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this deployment based on the context it is used
func (m *Deployment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActiveNetworkInterfaces(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArcedgeARole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArcedgeASystemName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArcedgeBRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArcedgeBSystemName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsDeployment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureDeployment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupNetworkInterfaces(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCoordinates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCredentialsID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGcpDeployment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLatestAvailableImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOciDeployment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOnpremDeployment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProvider(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpgradeAvailable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVsphereDeployment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Deployment) contextValidateActiveNetworkInterfaces(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "active_network_interfaces", "body", []*NetworkInterface(m.ActiveNetworkInterfaces)); err != nil {
		return err
	}

	for i := 0; i < len(m.ActiveNetworkInterfaces); i++ {

		if m.ActiveNetworkInterfaces[i] != nil {
			if err := m.ActiveNetworkInterfaces[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("active_network_interfaces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("active_network_interfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Deployment) contextValidateArcedgeARole(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ArcedgeARole.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("arcedgeA_role")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("arcedgeA_role")
		}
		return err
	}

	return nil
}

func (m *Deployment) contextValidateArcedgeASystemName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "arcedgeA_system_name", "body", string(m.ArcedgeASystemName)); err != nil {
		return err
	}

	return nil
}

func (m *Deployment) contextValidateArcedgeBRole(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ArcedgeBRole.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("arcedgeB_role")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("arcedgeB_role")
		}
		return err
	}

	return nil
}

func (m *Deployment) contextValidateArcedgeBSystemName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "arcedgeB_system_name", "body", string(m.ArcedgeBSystemName)); err != nil {
		return err
	}

	return nil
}

func (m *Deployment) contextValidateAwsDeployment(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsDeployment != nil {
		if err := m.AwsDeployment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws_deployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aws_deployment")
			}
			return err
		}
	}

	return nil
}

func (m *Deployment) contextValidateAzureDeployment(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureDeployment != nil {
		if err := m.AzureDeployment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure_deployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azure_deployment")
			}
			return err
		}
	}

	return nil
}

func (m *Deployment) contextValidateBackupNetworkInterfaces(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "backup_network_interfaces", "body", []*NetworkInterface(m.BackupNetworkInterfaces)); err != nil {
		return err
	}

	for i := 0; i < len(m.BackupNetworkInterfaces); i++ {

		if m.BackupNetworkInterfaces[i] != nil {
			if err := m.BackupNetworkInterfaces[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backup_network_interfaces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("backup_network_interfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Deployment) contextValidateCoordinates(ctx context.Context, formats strfmt.Registry) error {

	if m.Coordinates != nil {
		if err := m.Coordinates.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("coordinates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("coordinates")
			}
			return err
		}
	}

	return nil
}

func (m *Deployment) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *Deployment) contextValidateCredentialsID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "credentials_id", "body", string(m.CredentialsID)); err != nil {
		return err
	}

	return nil
}

func (m *Deployment) contextValidateGcpDeployment(ctx context.Context, formats strfmt.Registry) error {

	if m.GcpDeployment != nil {
		if err := m.GcpDeployment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcp_deployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcp_deployment")
			}
			return err
		}
	}

	return nil
}

func (m *Deployment) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Deployment) contextValidateLatestAvailableImage(ctx context.Context, formats strfmt.Registry) error {

	if m.LatestAvailableImage != nil {
		if err := m.LatestAvailableImage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latest_available_image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("latest_available_image")
			}
			return err
		}
	}

	return nil
}

func (m *Deployment) contextValidateOciDeployment(ctx context.Context, formats strfmt.Registry) error {

	if m.OciDeployment != nil {
		if err := m.OciDeployment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oci_deployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oci_deployment")
			}
			return err
		}
	}

	return nil
}

func (m *Deployment) contextValidateOnpremDeployment(ctx context.Context, formats strfmt.Registry) error {

	if m.OnpremDeployment != nil {
		if err := m.OnpremDeployment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("onprem_deployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("onprem_deployment")
			}
			return err
		}
	}

	return nil
}

func (m *Deployment) contextValidateProvider(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Provider.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("provider")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("provider")
		}
		return err
	}

	return nil
}

func (m *Deployment) contextValidateSourceImage(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceImage != nil {
		if err := m.SourceImage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source_image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source_image")
			}
			return err
		}
	}

	return nil
}

func (m *Deployment) contextValidateUpgradeAvailable(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "upgrade_available", "body", m.UpgradeAvailable); err != nil {
		return err
	}

	return nil
}

func (m *Deployment) contextValidateVsphereDeployment(ctx context.Context, formats strfmt.Registry) error {

	if m.VsphereDeployment != nil {
		if err := m.VsphereDeployment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vsphere_deployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vsphere_deployment")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Deployment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Deployment) UnmarshalBinary(b []byte) error {
	var res Deployment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
