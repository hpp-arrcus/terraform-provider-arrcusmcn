// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ComponentTypes component types
//
// swagger:model componentTypes
type ComponentTypes string

func NewComponentTypes(value ComponentTypes) *ComponentTypes {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ComponentTypes.
func (m ComponentTypes) Pointer() *ComponentTypes {
	return &m
}

const (

	// ComponentTypesHUB captures enum value "HUB"
	ComponentTypesHUB ComponentTypes = "HUB"

	// ComponentTypesSPOKE captures enum value "SPOKE"
	ComponentTypesSPOKE ComponentTypes = "SPOKE"

	// ComponentTypesHUBAndSPOKE captures enum value "HUB & SPOKE"
	ComponentTypesHUBAndSPOKE ComponentTypes = "HUB & SPOKE"
)

// for schema
var componentTypesEnum []interface{}

func init() {
	var res []ComponentTypes
	if err := json.Unmarshal([]byte(`["HUB","SPOKE","HUB \u0026 SPOKE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		componentTypesEnum = append(componentTypesEnum, v)
	}
}

func (m ComponentTypes) validateComponentTypesEnum(path, location string, value ComponentTypes) error {
	if err := validate.EnumCase(path, location, value, componentTypesEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this component types
func (m ComponentTypes) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateComponentTypesEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this component types based on context it is used
func (m ComponentTypes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
