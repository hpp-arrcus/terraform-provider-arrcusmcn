// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ArcedgeUpgradeResponse arcedge upgrade response
//
// swagger:model arcedge_upgrade_response
type ArcedgeUpgradeResponse struct {

	// current image
	CurrentImage *ArcedgeImage `json:"currentImage,omitempty"`

	// status
	// Required: true
	Status *bool `json:"status"`

	// target image
	TargetImage *ArcedgeImage `json:"targetImage,omitempty"`
}

// Validate validates this arcedge upgrade response
func (m *ArcedgeUpgradeResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetImage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArcedgeUpgradeResponse) validateCurrentImage(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentImage) { // not required
		return nil
	}

	if m.CurrentImage != nil {
		if err := m.CurrentImage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentImage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currentImage")
			}
			return err
		}
	}

	return nil
}

func (m *ArcedgeUpgradeResponse) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ArcedgeUpgradeResponse) validateTargetImage(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetImage) { // not required
		return nil
	}

	if m.TargetImage != nil {
		if err := m.TargetImage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetImage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetImage")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this arcedge upgrade response based on the context it is used
func (m *ArcedgeUpgradeResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCurrentImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArcedgeUpgradeResponse) contextValidateCurrentImage(ctx context.Context, formats strfmt.Registry) error {

	if m.CurrentImage != nil {
		if err := m.CurrentImage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentImage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currentImage")
			}
			return err
		}
	}

	return nil
}

func (m *ArcedgeUpgradeResponse) contextValidateTargetImage(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetImage != nil {
		if err := m.TargetImage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetImage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetImage")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArcedgeUpgradeResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArcedgeUpgradeResponse) UnmarshalBinary(b []byte) error {
	var res ArcedgeUpgradeResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
