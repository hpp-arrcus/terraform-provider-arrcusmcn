// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Tenant tenant
//
// swagger:model tenant
type Tenant struct {

	// defaultuser
	// Required: true
	Defaultuser *User `json:"defaultuser"`

	// domain
	// Required: true
	// Min Length: 1
	Domain *string `json:"domain"`

	// id
	// Read Only: true
	// Format: ObjectId
	ID *strfmt.ObjectId `json:"id,omitempty" bson:"_id, omitempty"`

	// is default
	// Read Only: true
	IsDefault *bool `json:"is_default"`

	// name
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// numconnections
	// Read Only: true
	Numconnections int64 `json:"numconnections"`

	// numdeployments
	// Read Only: true
	Numdeployments int64 `json:"numdeployments"`

	// organization
	// Min Length: 1
	Organization string `json:"organization,omitempty"`

	// saml
	Saml *SamlConfig `json:"saml,omitempty"`
}

// Validate validates this tenant
func (m *Tenant) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultuser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSaml(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Tenant) validateDefaultuser(formats strfmt.Registry) error {

	if err := validate.Required("defaultuser", "body", m.Defaultuser); err != nil {
		return err
	}

	if m.Defaultuser != nil {
		if err := m.Defaultuser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultuser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultuser")
			}
			return err
		}
	}

	return nil
}

func (m *Tenant) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	if err := validate.MinLength("domain", "body", *m.Domain, 1); err != nil {
		return err
	}

	return nil
}

func (m *Tenant) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "ObjectId", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Tenant) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	return nil
}

func (m *Tenant) validateOrganization(formats strfmt.Registry) error {
	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if err := validate.MinLength("organization", "body", m.Organization, 1); err != nil {
		return err
	}

	return nil
}

func (m *Tenant) validateSaml(formats strfmt.Registry) error {
	if swag.IsZero(m.Saml) { // not required
		return nil
	}

	if m.Saml != nil {
		if err := m.Saml.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("saml")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("saml")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tenant based on the context it is used
func (m *Tenant) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDefaultuser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsDefault(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNumconnections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNumdeployments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSaml(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Tenant) contextValidateDefaultuser(ctx context.Context, formats strfmt.Registry) error {

	if m.Defaultuser != nil {
		if err := m.Defaultuser.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultuser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultuser")
			}
			return err
		}
	}

	return nil
}

func (m *Tenant) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Tenant) contextValidateIsDefault(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "is_default", "body", m.IsDefault); err != nil {
		return err
	}

	return nil
}

func (m *Tenant) contextValidateNumconnections(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "numconnections", "body", int64(m.Numconnections)); err != nil {
		return err
	}

	return nil
}

func (m *Tenant) contextValidateNumdeployments(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "numdeployments", "body", int64(m.Numdeployments)); err != nil {
		return err
	}

	return nil
}

func (m *Tenant) contextValidateSaml(ctx context.Context, formats strfmt.Registry) error {

	if m.Saml != nil {
		if err := m.Saml.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("saml")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("saml")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Tenant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Tenant) UnmarshalBinary(b []byte) error {
	var res Tenant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
