// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NetworkInterface network interface
//
// swagger:model network_interface
type NetworkInterface struct {

	// adapter type
	AdapterType string `json:"adapter_type,omitempty"`

	// aws interface
	AwsInterface *AwsInterface `json:"aws_interface,omitempty"`

	// azure interface
	AzureInterface *AzureInterface `json:"azure_interface,omitempty"`

	// gcp interface
	GcpInterface *GcpInterface `json:"gcp_interface,omitempty"`

	// global ipv6 address
	GlobalIPV6Address string `json:"global_ipv6_address,omitempty"`

	// global ipv6 pfxlen
	GlobalIPV6Pfxlen int64 `json:"global_ipv6_pfxlen,omitempty"`

	// linklocal ipv6 address
	LinklocalIPV6Address string `json:"linklocal_ipv6_address,omitempty"`

	// linklocal ipv6 pfxlen
	LinklocalIPV6Pfxlen int64 `json:"linklocal_ipv6_pfxlen,omitempty"`

	// mac address
	MacAddress string `json:"mac_address,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// oci interface
	OciInterface *OciInterface `json:"oci_interface,omitempty"`

	// private ipv4 address
	PrivateIPV4Address string `json:"private_ipv4_address,omitempty"`

	// private ipv4 cidr
	PrivateIPV4Cidr string `json:"private_ipv4_cidr,omitempty"`

	// private ipv4 gateway
	PrivateIPV4Gateway string `json:"private_ipv4_gateway,omitempty"`

	// private ipv4 pfxlen
	PrivateIPV4Pfxlen int64 `json:"private_ipv4_pfxlen,omitempty"`

	// public ipv4 address
	PublicIPV4Address string `json:"public_ipv4_address,omitempty"`

	// public ipv4 pfxlen
	PublicIPV4Pfxlen int64 `json:"public_ipv4_pfxlen,omitempty"`

	// vsphere interface
	VsphereInterface *VsphereInterface `json:"vsphere_interface,omitempty"`
}

// Validate validates this network interface
func (m *NetworkInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsInterface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureInterface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcpInterface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOciInterface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVsphereInterface(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkInterface) validateAwsInterface(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsInterface) { // not required
		return nil
	}

	if m.AwsInterface != nil {
		if err := m.AwsInterface.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws_interface")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aws_interface")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkInterface) validateAzureInterface(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureInterface) { // not required
		return nil
	}

	if m.AzureInterface != nil {
		if err := m.AzureInterface.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure_interface")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azure_interface")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkInterface) validateGcpInterface(formats strfmt.Registry) error {
	if swag.IsZero(m.GcpInterface) { // not required
		return nil
	}

	if m.GcpInterface != nil {
		if err := m.GcpInterface.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcp_interface")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcp_interface")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkInterface) validateOciInterface(formats strfmt.Registry) error {
	if swag.IsZero(m.OciInterface) { // not required
		return nil
	}

	if m.OciInterface != nil {
		if err := m.OciInterface.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oci_interface")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oci_interface")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkInterface) validateVsphereInterface(formats strfmt.Registry) error {
	if swag.IsZero(m.VsphereInterface) { // not required
		return nil
	}

	if m.VsphereInterface != nil {
		if err := m.VsphereInterface.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vsphere_interface")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vsphere_interface")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this network interface based on the context it is used
func (m *NetworkInterface) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsInterface(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureInterface(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGcpInterface(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOciInterface(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVsphereInterface(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkInterface) contextValidateAwsInterface(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsInterface != nil {
		if err := m.AwsInterface.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws_interface")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aws_interface")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkInterface) contextValidateAzureInterface(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureInterface != nil {
		if err := m.AzureInterface.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure_interface")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azure_interface")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkInterface) contextValidateGcpInterface(ctx context.Context, formats strfmt.Registry) error {

	if m.GcpInterface != nil {
		if err := m.GcpInterface.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcp_interface")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcp_interface")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkInterface) contextValidateOciInterface(ctx context.Context, formats strfmt.Registry) error {

	if m.OciInterface != nil {
		if err := m.OciInterface.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oci_interface")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oci_interface")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkInterface) contextValidateVsphereInterface(ctx context.Context, formats strfmt.Registry) error {

	if m.VsphereInterface != nil {
		if err := m.VsphereInterface.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vsphere_interface")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vsphere_interface")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkInterface) UnmarshalBinary(b []byte) error {
	var res NetworkInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
