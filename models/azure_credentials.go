// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureCredentials azure credentials
//
// swagger:model azure_credentials
type AzureCredentials struct {

	// azure client id
	// Min Length: 8
	AzureClientID string `json:"azure_client_id,omitempty"`

	// azure client secret
	// Min Length: 8
	AzureClientSecret string `json:"azure_client_secret,omitempty"`

	// azure subscription id
	// Min Length: 8
	AzureSubscriptionID string `json:"azure_subscription_id,omitempty"`

	// azure tenant id
	// Min Length: 8
	AzureTenantID string `json:"azure_tenant_id,omitempty"`

	// id
	// Min Length: 1
	ID string `json:"id,omitempty"`
}

// Validate validates this azure credentials
func (m *AzureCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAzureClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureClientSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureSubscriptionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureCredentials) validateAzureClientID(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureClientID) { // not required
		return nil
	}

	if err := validate.MinLength("azure_client_id", "body", m.AzureClientID, 8); err != nil {
		return err
	}

	return nil
}

func (m *AzureCredentials) validateAzureClientSecret(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureClientSecret) { // not required
		return nil
	}

	if err := validate.MinLength("azure_client_secret", "body", m.AzureClientSecret, 8); err != nil {
		return err
	}

	return nil
}

func (m *AzureCredentials) validateAzureSubscriptionID(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureSubscriptionID) { // not required
		return nil
	}

	if err := validate.MinLength("azure_subscription_id", "body", m.AzureSubscriptionID, 8); err != nil {
		return err
	}

	return nil
}

func (m *AzureCredentials) validateAzureTenantID(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureTenantID) { // not required
		return nil
	}

	if err := validate.MinLength("azure_tenant_id", "body", m.AzureTenantID, 8); err != nil {
		return err
	}

	return nil
}

func (m *AzureCredentials) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", m.ID, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this azure credentials based on context it is used
func (m *AzureCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AzureCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureCredentials) UnmarshalBinary(b []byte) error {
	var res AzureCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
