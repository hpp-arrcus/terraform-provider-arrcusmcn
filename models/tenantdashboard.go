// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Tenantdashboard tenantdashboard
//
// swagger:model tenantdashboard
type Tenantdashboard struct {

	// connections
	// Read Only: true
	Connections []Connectionname `json:"connections"`

	// deployments
	// Read Only: true
	Deployments []Deploymentname `json:"deployments"`

	// id
	// Read Only: true
	// Format: ObjectId
	ID *strfmt.ObjectId `json:"id,omitempty" bson:"_id, omitempty"`

	// numaccounts
	// Read Only: true
	Numaccounts int64 `json:"numaccounts"`

	// numadmins
	// Read Only: true
	Numadmins int64 `json:"numadmins"`

	// numconnections
	// Read Only: true
	Numconnections int64 `json:"numconnections"`

	// numdeployments
	// Read Only: true
	Numdeployments int64 `json:"numdeployments"`

	// numoperators
	// Read Only: true
	Numoperators int64 `json:"numoperators"`
}

// Validate validates this tenantdashboard
func (m *Tenantdashboard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Tenantdashboard) validateConnections(formats strfmt.Registry) error {
	if swag.IsZero(m.Connections) { // not required
		return nil
	}

	for i := 0; i < len(m.Connections); i++ {

		if err := m.Connections[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connections" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connections" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *Tenantdashboard) validateDeployments(formats strfmt.Registry) error {
	if swag.IsZero(m.Deployments) { // not required
		return nil
	}

	for i := 0; i < len(m.Deployments); i++ {

		if err := m.Deployments[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployments" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployments" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *Tenantdashboard) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "ObjectId", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this tenantdashboard based on the context it is used
func (m *Tenantdashboard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConnections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeployments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNumaccounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNumadmins(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNumconnections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNumdeployments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNumoperators(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Tenantdashboard) contextValidateConnections(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "connections", "body", []Connectionname(m.Connections)); err != nil {
		return err
	}

	for i := 0; i < len(m.Connections); i++ {

		if err := m.Connections[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connections" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connections" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *Tenantdashboard) contextValidateDeployments(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deployments", "body", []Deploymentname(m.Deployments)); err != nil {
		return err
	}

	for i := 0; i < len(m.Deployments); i++ {

		if err := m.Deployments[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployments" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployments" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *Tenantdashboard) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Tenantdashboard) contextValidateNumaccounts(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "numaccounts", "body", int64(m.Numaccounts)); err != nil {
		return err
	}

	return nil
}

func (m *Tenantdashboard) contextValidateNumadmins(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "numadmins", "body", int64(m.Numadmins)); err != nil {
		return err
	}

	return nil
}

func (m *Tenantdashboard) contextValidateNumconnections(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "numconnections", "body", int64(m.Numconnections)); err != nil {
		return err
	}

	return nil
}

func (m *Tenantdashboard) contextValidateNumdeployments(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "numdeployments", "body", int64(m.Numdeployments)); err != nil {
		return err
	}

	return nil
}

func (m *Tenantdashboard) contextValidateNumoperators(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "numoperators", "body", int64(m.Numoperators)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Tenantdashboard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Tenantdashboard) UnmarshalBinary(b []byte) error {
	var res Tenantdashboard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
