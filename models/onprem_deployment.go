// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OnpremDeployment onprem deployment
//
// swagger:model onprem_deployment
type OnpremDeployment struct {

	// assign public ip
	AssignPublicIP bool `json:"assign_public_ip,omitempty"`

	// networks
	Networks []*KvmNetwork `json:"networks"`

	// prefix
	Prefix string `json:"prefix,omitempty"`

	// private ip
	PrivateIP string `json:"private_ip,omitempty"`

	// private ip backup
	// Min Length: 1
	PrivateIPBackup string `json:"private_ip_backup,omitempty"`

	// public ip
	PublicIP string `json:"public_ip,omitempty"`

	// public ip backup
	PublicIPBackup string `json:"public_ip_backup,omitempty"`

	// ssh psw
	SSHPsw string `json:"ssh_psw,omitempty"`

	// vcpus
	Vcpus int64 `json:"vcpus,omitempty"`

	// vm count
	VMCount int64 `json:"vm_count,omitempty"`

	// vm memory
	VMMemory int64 `json:"vm_memory,omitempty"`
}

// Validate validates this onprem deployment
func (m *OnpremDeployment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetworks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateIPBackup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OnpremDeployment) validateNetworks(formats strfmt.Registry) error {
	if swag.IsZero(m.Networks) { // not required
		return nil
	}

	for i := 0; i < len(m.Networks); i++ {
		if swag.IsZero(m.Networks[i]) { // not required
			continue
		}

		if m.Networks[i] != nil {
			if err := m.Networks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OnpremDeployment) validatePrivateIPBackup(formats strfmt.Registry) error {
	if swag.IsZero(m.PrivateIPBackup) { // not required
		return nil
	}

	if err := validate.MinLength("private_ip_backup", "body", m.PrivateIPBackup, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this onprem deployment based on the context it is used
func (m *OnpremDeployment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNetworks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OnpremDeployment) contextValidateNetworks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Networks); i++ {

		if m.Networks[i] != nil {
			if err := m.Networks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OnpremDeployment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OnpremDeployment) UnmarshalBinary(b []byte) error {
	var res OnpremDeployment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
