// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PasswordChangeRequest password change request
//
// swagger:model password_change_request
type PasswordChangeRequest struct {

	// newpassword
	// Required: true
	// Min Length: 1
	Newpassword *string `json:"newpassword"`

	// userlogin
	// Required: true
	Userlogin *LoginRequest `json:"userlogin"`
}

// Validate validates this password change request
func (m *PasswordChangeRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNewpassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserlogin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PasswordChangeRequest) validateNewpassword(formats strfmt.Registry) error {

	if err := validate.Required("newpassword", "body", m.Newpassword); err != nil {
		return err
	}

	if err := validate.MinLength("newpassword", "body", *m.Newpassword, 1); err != nil {
		return err
	}

	return nil
}

func (m *PasswordChangeRequest) validateUserlogin(formats strfmt.Registry) error {

	if err := validate.Required("userlogin", "body", m.Userlogin); err != nil {
		return err
	}

	if m.Userlogin != nil {
		if err := m.Userlogin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userlogin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userlogin")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this password change request based on the context it is used
func (m *PasswordChangeRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUserlogin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PasswordChangeRequest) contextValidateUserlogin(ctx context.Context, formats strfmt.Registry) error {

	if m.Userlogin != nil {
		if err := m.Userlogin.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userlogin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userlogin")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PasswordChangeRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PasswordChangeRequest) UnmarshalBinary(b []byte) error {
	var res PasswordChangeRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
