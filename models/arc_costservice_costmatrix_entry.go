// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ArcCostserviceCostmatrixEntry arc costservice costmatrix entry
//
// swagger:model arc_costservice_costmatrix_entry
type ArcCostserviceCostmatrixEntry struct {

	// begin range
	BeginRange string `json:"BeginRange,omitempty"`

	// currency code
	CurrencyCode string `json:"CurrencyCode,omitempty"`

	// end range
	EndRange string `json:"EndRange,omitempty"`

	// price per unit
	PricePerUnit float64 `json:"PricePerUnit,omitempty"`

	// rank
	Rank int64 `json:"Rank,omitempty"`

	// unit
	Unit string `json:"Unit,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// dest csp
	DestCsp ArcCostCsps `json:"destCsp,omitempty"`

	// dest region
	DestRegion string `json:"destRegion,omitempty"`

	// sku
	Sku string `json:"sku,omitempty"`

	// source csp
	SourceCsp ArcCostCsps `json:"sourceCsp,omitempty"`

	// source region
	SourceRegion string `json:"sourceRegion,omitempty"`

	// usage type
	UsageType string `json:"usageType,omitempty"`
}

// Validate validates this arc costservice costmatrix entry
func (m *ArcCostserviceCostmatrixEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestCsp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceCsp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArcCostserviceCostmatrixEntry) validateDestCsp(formats strfmt.Registry) error {
	if swag.IsZero(m.DestCsp) { // not required
		return nil
	}

	if err := m.DestCsp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("destCsp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("destCsp")
		}
		return err
	}

	return nil
}

func (m *ArcCostserviceCostmatrixEntry) validateSourceCsp(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceCsp) { // not required
		return nil
	}

	if err := m.SourceCsp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sourceCsp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sourceCsp")
		}
		return err
	}

	return nil
}

// ContextValidate validate this arc costservice costmatrix entry based on the context it is used
func (m *ArcCostserviceCostmatrixEntry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDestCsp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceCsp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArcCostserviceCostmatrixEntry) contextValidateDestCsp(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DestCsp.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("destCsp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("destCsp")
		}
		return err
	}

	return nil
}

func (m *ArcCostserviceCostmatrixEntry) contextValidateSourceCsp(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SourceCsp.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sourceCsp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sourceCsp")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArcCostserviceCostmatrixEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArcCostserviceCostmatrixEntry) UnmarshalBinary(b []byte) error {
	var res ArcCostserviceCostmatrixEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
