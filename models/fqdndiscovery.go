// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Fqdndiscovery fqdndiscovery
//
// swagger:model fqdndiscovery
type Fqdndiscovery struct {

	// id
	// Read Only: true
	// Min Length: 1
	// Format: ObjectId
	ID *strfmt.ObjectId `json:"id,omitempty" bson:"_id, omitempty"`

	// start
	// Required: true
	// Read Only: true
	Start bool `json:"start"`

	// time
	Time int64 `json:"time,omitempty"`
}

// Validate validates this fqdndiscovery
func (m *Fqdndiscovery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Fqdndiscovery) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", m.ID.String(), 1); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "ObjectId", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Fqdndiscovery) validateStart(formats strfmt.Registry) error {

	if err := validate.Required("start", "body", bool(m.Start)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this fqdndiscovery based on the context it is used
func (m *Fqdndiscovery) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStart(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Fqdndiscovery) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Fqdndiscovery) contextValidateStart(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "start", "body", bool(m.Start)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Fqdndiscovery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Fqdndiscovery) UnmarshalBinary(b []byte) error {
	var res Fqdndiscovery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
