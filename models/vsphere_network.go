// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VsphereNetwork vsphere network
//
// swagger:model vsphere_network
type VsphereNetwork struct {

	// adapter type
	// Enum: [e1000 e1000e vmxnet3 sriov]
	AdapterType string `json:"adapter_type,omitempty"`

	// name
	// Min Length: 1
	Name string `json:"name,omitempty"`

	// physical function
	PhysicalFunction *VspherePhysicalFunction `json:"physical_function,omitempty"`
}

// Validate validates this vsphere network
func (m *VsphereNetwork) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdapterType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalFunction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var vsphereNetworkTypeAdapterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["e1000","e1000e","vmxnet3","sriov"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vsphereNetworkTypeAdapterTypePropEnum = append(vsphereNetworkTypeAdapterTypePropEnum, v)
	}
}

const (

	// VsphereNetworkAdapterTypeE1000 captures enum value "e1000"
	VsphereNetworkAdapterTypeE1000 string = "e1000"

	// VsphereNetworkAdapterTypeE1000e captures enum value "e1000e"
	VsphereNetworkAdapterTypeE1000e string = "e1000e"

	// VsphereNetworkAdapterTypeVmxnet3 captures enum value "vmxnet3"
	VsphereNetworkAdapterTypeVmxnet3 string = "vmxnet3"

	// VsphereNetworkAdapterTypeSriov captures enum value "sriov"
	VsphereNetworkAdapterTypeSriov string = "sriov"
)

// prop value enum
func (m *VsphereNetwork) validateAdapterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vsphereNetworkTypeAdapterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VsphereNetwork) validateAdapterType(formats strfmt.Registry) error {
	if swag.IsZero(m.AdapterType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAdapterTypeEnum("adapter_type", "body", m.AdapterType); err != nil {
		return err
	}

	return nil
}

func (m *VsphereNetwork) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", m.Name, 1); err != nil {
		return err
	}

	return nil
}

func (m *VsphereNetwork) validatePhysicalFunction(formats strfmt.Registry) error {
	if swag.IsZero(m.PhysicalFunction) { // not required
		return nil
	}

	if m.PhysicalFunction != nil {
		if err := m.PhysicalFunction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physical_function")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physical_function")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vsphere network based on the context it is used
func (m *VsphereNetwork) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePhysicalFunction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VsphereNetwork) contextValidatePhysicalFunction(ctx context.Context, formats strfmt.Registry) error {

	if m.PhysicalFunction != nil {
		if err := m.PhysicalFunction.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physical_function")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physical_function")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VsphereNetwork) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VsphereNetwork) UnmarshalBinary(b []byte) error {
	var res VsphereNetwork
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
