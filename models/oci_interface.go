// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OciInterface oci interface
//
// swagger:model oci_interface
type OciInterface struct {

	// network
	Network *OciNetwork `json:"network,omitempty"`

	// network security groups
	NetworkSecurityGroups []string `json:"network_security_groups"`

	// private ip id
	PrivateIPID string `json:"private_ip_id,omitempty"`

	// public ip id
	PublicIPID string `json:"public_ip_id,omitempty"`

	// route table id
	RouteTableID string `json:"route_table_id,omitempty"`

	// secondary private ip
	SecondaryPrivateIP string `json:"secondary_private_ip,omitempty"`

	// secondary private ip id
	SecondaryPrivateIPID string `json:"secondary_private_ip_id,omitempty"`

	// vnic id
	VnicID string `json:"vnic_id,omitempty"`
}

// Validate validates this oci interface
func (m *OciInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OciInterface) validateNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.Network) { // not required
		return nil
	}

	if m.Network != nil {
		if err := m.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oci interface based on the context it is used
func (m *OciInterface) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OciInterface) contextValidateNetwork(ctx context.Context, formats strfmt.Registry) error {

	if m.Network != nil {
		if err := m.Network.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OciInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OciInterface) UnmarshalBinary(b []byte) error {
	var res OciInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
