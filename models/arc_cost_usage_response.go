// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ArcCostUsageResponse arc cost usage response
//
// swagger:model arc_cost_usage_response
type ArcCostUsageResponse struct {

	// complete price function
	CompletePriceFunction []*ArcCostPriceFunction `json:"completePriceFunction"`

	// devices info
	DevicesInfo map[string]ArcCostDeviceInfo `json:"devicesInfo,omitempty"`

	// error
	Error string `json:"error,omitempty"`

	// instance info
	InstanceInfo *ArcCostInstanceInfo `json:"instanceInfo,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this arc cost usage response
func (m *ArcCostUsageResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompletePriceFunction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevicesInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArcCostUsageResponse) validateCompletePriceFunction(formats strfmt.Registry) error {
	if swag.IsZero(m.CompletePriceFunction) { // not required
		return nil
	}

	for i := 0; i < len(m.CompletePriceFunction); i++ {
		if swag.IsZero(m.CompletePriceFunction[i]) { // not required
			continue
		}

		if m.CompletePriceFunction[i] != nil {
			if err := m.CompletePriceFunction[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("completePriceFunction" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("completePriceFunction" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ArcCostUsageResponse) validateDevicesInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DevicesInfo) { // not required
		return nil
	}

	for k := range m.DevicesInfo {

		if err := validate.Required("devicesInfo"+"."+k, "body", m.DevicesInfo[k]); err != nil {
			return err
		}
		if val, ok := m.DevicesInfo[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("devicesInfo" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("devicesInfo" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *ArcCostUsageResponse) validateInstanceInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.InstanceInfo) { // not required
		return nil
	}

	if m.InstanceInfo != nil {
		if err := m.InstanceInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instanceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instanceInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this arc cost usage response based on the context it is used
func (m *ArcCostUsageResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCompletePriceFunction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDevicesInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstanceInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArcCostUsageResponse) contextValidateCompletePriceFunction(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CompletePriceFunction); i++ {

		if m.CompletePriceFunction[i] != nil {
			if err := m.CompletePriceFunction[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("completePriceFunction" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("completePriceFunction" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ArcCostUsageResponse) contextValidateDevicesInfo(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.DevicesInfo {

		if val, ok := m.DevicesInfo[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ArcCostUsageResponse) contextValidateInstanceInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.InstanceInfo != nil {
		if err := m.InstanceInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instanceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instanceInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArcCostUsageResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArcCostUsageResponse) UnmarshalBinary(b []byte) error {
	var res ArcCostUsageResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
